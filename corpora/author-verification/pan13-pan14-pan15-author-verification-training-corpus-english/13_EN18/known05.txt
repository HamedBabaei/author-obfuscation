A string is a text, i.e. a sequence of characters (letters, digits and other special characters). String handling is a little tricky in C++, so we have dedicated an separate chapter to this subject. 
Actually, a string is an array that consists of a number of items, where each item is a character in the string. 
There are a number of string handling functions. We will in this chapter get acquainted with the most common and usable string functions, like calculating the length of a string, copying a string, concatenating strings and picking out parts of a string. 
In programming, string handling is important, since a user often enters information in text form which is taken care of by the program. We will go through several programming examples, where we will have use of our string knowledge.
We will first get to know the most simple of all strings, namely the one containing just one character. To store one character in a variable we use the data type char. Below we declare a string variable of the char type:
The variable cLetter can now contain any one character. We can assign a value to the variable:
Note that we use single quotes for the character. 
We can also, like for all kinds of variables, assign a value directly in the declaration:
Our first program shows how to handle entry of characters by the user to select a menu option. The program will first display a menu:
Here the user can enter one of the letters A, B, C or D to choose an item. We will not build a full-featured order/invoice/ warehouse/ finance system, but we will only let the program print a text about the selected choice. We start with a JSP graph:
The first action is that the menu is displayed. Then the user is prompted for a choice by means of the letters A-D. Finally the requested option is executed, i.e. a simple text message will be printed. If the user enters another character than A-D, an error message is printed.
First a char variable is declared named cSel, and then the menu is printed with a number of cout statements. The subsequent cin statement reads a character from the user to the variable cSel, which then is checked in the switch statement. The switch statement contains one case section for each option. Note that each case line has the character A-D within single quotes, which is necessary since it is a char variable that is checked. The default section takes care of all characters other than A, B, C or D.
We will now improve our menu program so that the user repeatedly can enter different options without terminating the program. We then put the entire menu printing and switch statement in a loop. The JSP graph will then be:
We complete the menu with still another option, X – Exit. As long as the user does not enter X, the loop proceeds. Furthermore we also clean the screen before the menu is displayed, which is the first operation of the loop. Here is the code:
To be able to clear the screen we need the header file stdlib.h. 
W use a do loop, where the condition is checked after the loop to ensure that the loop is run at least once. 
The first action in the loop is to clear the screen with system(“cls”). Then the menu is printed and the user is prompted for an option, i.e. a character to be stored in the variable cSel. That variable is checked in the switch statement, where a text is printed corresponding the selected option. If the user enters ‘X’, the text ‘You selected to exit’ will be printed, and the loop is terminated since the while condition specifies that cSel must not equal ‘X’. 
The method of letting the user enter an extra character to the variable temp at the end of the loop is a relatively unconvenient solution, but it has the advantage of avoiding to struggle with special C++ features regarding input, which we don’t go into here.
We will now create a logically rather complex program that uses char variables to print a number of ’X’ on the screen with the shape of a Christmas tree:
As you can see the tree has eleven branches and two ’X’:s to the trunk. We therefore need an outer loop that runs eleven times, where each turn prints a branch. Each branch consists of a number of ‘X’:s, different depending on which branch being printed. Furthermore we will have to print a suitable number of blanks before the ‘X’:s, so that the branches are centered symmetrically around the middle trunk. We therefore need two inner loops, one that prints the leading blanks and one that prints the ‘X’:s for each branch. After completion of the branches we need a loop that runs two turns and that prints the ‘X’:s for the trunk. We start with a JSP graph:
The JSP graph tells us that there is one outer loop for the branches, where each turn of the loop prints a branch. We then have one inner loop that prints the correct number of blanks and one inner loop that prints the ‘X’:s. The same is true for the trunk where we have an outer loop where each turn of the loop prints one line of the trunk, and one inner loop that prints the blanks before one single ‘X’ is printed.
We declare a variable named x that correspond to the ’X’, and a variable named blank corresponding to the blank character. 
The first outer for-loop has an i as loop counter and goes from 10 to 0 (11 turns). We have selected to let the values run backwards to make the subsequent math easier. i is consequently a line counter for the branches of the tree. 
The first inner loop has a j as loop counter and goes from 0 to i. It prints the correct number of blanks for each branch. Since i is counted reversed, the number of blanks will decrease for each branch. Each turn of the loop prints one blank. 
After completion of the blanks for a bransch, first an ’X’ is printed. Since the number of ’X’:s at each bransch is odd, the remaining number of ’X’:s to be printed is even.